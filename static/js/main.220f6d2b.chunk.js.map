{"version":3,"sources":["components/strokes.jsx","components/grid.jsx","components/postgame.jsx","components/game.jsx","App.jsx","index.js"],"names":["StrokeX","strokeColor","xmlns","viewBox","className","d","style","fill","stroke","strokeWidth","strokeLinecap","strokeDashoffset","strokeDasharray","StrokeO","transform","StrokeLine","x1","y1","x2","y2","StrokeSlant","Grid","mark","index","handleClick","id","onClick","PostGame","winner","playAgain","quitGame","gridArea","lineTransform","slantTransform","Game","props","e","a","resume","state","boardWon","opponent","playerTwo","currentTurn","turn","parseInt","target","getAttribute","displayGrid","console","log","setState","checkBoard","botMove","winningState","map","c","i","almostWin","arr","x","o","none","forEach","b","almost","filter","w","length","find","some","v","possibleMoves","Math","floor","random","Array","prevturn","winning","findIndex","every","m","scoreOne","scoreTwo","lineType","round","this","Fragment","Component","Mode","value","App","start","modeSelect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGMA,EAAU,SAAC,GAA+B,IAAD,IAA5BC,mBAA4B,MAAd,QAAc,EAC7C,OACE,sBAAKC,MAAM,6BAA6BC,QAAQ,cAAhD,UACE,sBACEC,UAAU,aACVC,EAAE,+DACFC,MAAO,CACLC,KAAM,OACNC,OAAQP,EACRQ,YAAa,IACbC,cAAe,QACfC,iBAAkB,MAClBC,gBAAiB,SAGrB,sBACER,UAAU,aACVC,EAAE,mFACFC,MAAO,CACLC,KAAM,OACNC,OAAQP,EACRQ,YAAa,IACbC,cAAe,QACfC,iBAAkB,MAClBC,gBAAiB,aAOrBC,EAAU,SAAC,GAA6B,IAAD,IAA1BZ,mBAA0B,MAAZ,MAAY,EAC3C,OACE,qBAAKC,MAAM,6BAA6BC,QAAQ,cAAhD,SACE,sBACEC,UAAU,WACVC,EAAE,0RACFS,UAAU,qCACVR,MAAO,CACLC,KAAM,OACNC,OAAQP,EACRQ,YAAa,IACbC,cAAe,QACfC,iBAAkB,MAClBC,gBAAiB,YAOrBG,EAAa,SAAC,GAA+C,IAAD,IAA5Cd,mBAA4C,MAA9B,QAA8B,MAArBa,iBAAqB,MAAT,GAAS,EAChE,OACE,qBACEZ,MAAM,6BACNC,QAAQ,cACRC,UAAU,WACVE,MAAO,CAAEQ,aAJX,SAME,sBACEV,UAAU,WACVY,GAAG,aACHC,GAAG,IACHC,GAAG,YACHC,GAAG,IACHL,UAAU,uCACVR,MAAO,CACLC,KAAM,OACNC,OAAQP,EACRQ,YAAa,IACbC,cAAe,QACfC,iBAAkB,KAClBC,gBAAiB,WAOrBQ,EAAc,SAAC,GAA+C,IAAD,IAA5CnB,mBAA4C,MAA9B,QAA8B,MAArBa,iBAAqB,MAAT,GAAS,EACjE,OACE,qBACEZ,MAAM,6BACNC,QAAQ,cACRC,UAAU,WACVE,MAAO,CAAEQ,aAJX,SAME,sBACEV,UAAU,WACVY,GAAG,aACHC,GAAG,aACHC,GAAG,YACHC,GAAG,YACHL,UAAU,sDACVR,MAAO,CACLC,KAAM,OACNC,OAAQP,EACRQ,YAAa,IACbC,cAAe,QACfC,iBAAkB,KAClBC,gBAAiB,WCtFZS,EAdF,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC3B,OACE,sBACEC,GAAI,QAAUF,EACdA,MAAOA,EACPnB,UAAU,YACVsB,QAASF,EAJX,UAMY,MAATF,GAAgB,cAAC,EAAD,IACP,MAATA,GAAgB,cAAC,EAAD,QCIRK,EAdE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACrC,OACE,sBAAKL,GAAG,YAAR,UACE,mBAAGnB,MAAO,CAAEyB,SAAU,OAAtB,SAAgCH,IAChC,wBAAQF,QAASG,EAAWvB,MAAO,CAAEyB,SAAU,SAA/C,wBAGA,wBAAQL,QAASI,EAAUxB,MAAO,CAAEyB,SAAU,QAA9C,sBCFFC,G,MAAgB,IAClBC,EAAiB,GA+LJC,E,kDA5Lb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRX,YAlBmB,uCAkBL,WAAOY,GAAP,uBAAAC,EAAA,yDACNC,GAAU,EAAKC,MAAMC,SACzBC,EAAW,EAAKF,MAAMG,UACtBC,EAAc,EAAKJ,MAAMK,MAEvBN,GAAwB,aAAbG,GAA2C,IAAhBE,EAL9B,oBAMJpB,EAAQsB,SAAST,EAAEU,OAAOC,aAAa,UACzCC,EAPM,YAOY,EAAKT,MAAMS,aACjCC,QAAQC,IAAI3B,KACRA,GAAS,IAAMyB,EAAYzB,GATrB,wBAURyB,EAAYzB,GAAyB,IAAhBoB,EAAoB,IAAM,IAVvC,SAYF,EAAKQ,SAAS,CAAEP,KAAsB,IAAhBD,EAAoB,EAAI,EAAGK,gBAZ/C,OAaR,EAAKI,WAAWT,GAEC,QAAbF,GAAuB,EAAKF,MAAMC,UAAU,EAAKa,UAf7C,4CAlBK,wDAsCnBA,QAtCmB,sBAsCT,wCAAAhB,EAAA,6DACFiB,EAAe,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAEgBC,KAAI,SAACC,GAAD,OAC3BA,EAAED,KAAI,SAACE,GAAD,OAAO,EAAKlB,MAAMS,YAAYS,SAElCT,EAdI,YAcc,EAAKT,MAAMS,aAE3BU,EAAY,SAACC,GACjB,IAAIC,EAAI,EACNC,EAAI,EACJC,EAAO,EAOT,OANAH,EAAII,SAAQ,SAAC1B,GACX,IAAI2B,EAAI,EAAKzB,MAAMS,YAAYX,GACrB,MAAN2B,EAAWJ,IACA,MAANI,EAAWH,IACfC,OAES,IAATA,IAAqB,IAANF,GAAiB,IAANC,KAK/BI,EAASX,EAAaY,QAAO,SAACC,GAAD,OAAOT,EAAUS,OACvCC,QACLT,EAAMM,EAAOI,MAAK,SAAChC,GAAD,OAAOA,EAAEiC,MAAK,SAACN,GAAD,MAA0B,MAAnBhB,EAAYgB,SACvDzC,EAAQoC,EACJA,EAAIU,MAAK,SAACE,GAAD,OAAQvB,EAAYuB,MAC7BN,EAAO,GAAGI,MAAK,SAACE,GAAD,OAAQvB,EAAYuB,QAEjCC,EAAgBxB,EACnBO,KAAI,SAACgB,EAAGd,GAAJ,OAAYc,GAAId,KACpBS,QAAO,SAACK,GAAD,MAAa,MAANA,GAAmB,MAANA,KAC9BhD,EAAQiD,EAAcC,KAAKC,MAAMD,KAAKE,SAAWH,EAAcJ,UAGjEpB,EAAYzB,GAAS,IA5Cb,SA8CF,EAAK4B,SAAS,CAAEP,KAAM,EAAGI,gBA9CvB,OA+CR,EAAKI,WAAW,GA/CR,4CAtCS,EAwFnBvB,UAxFmB,sBAwFP,sBAAAQ,EAAA,sEACJ,EAAKc,SAAS,CAAEX,UAAU,EAAOQ,YAAa4B,MAAM,GAAGrE,SADnD,OAEc,IAApB,EAAKgC,MAAMK,MAAuC,QAAzB,EAAKL,MAAMG,WAAqB,EAAKW,UAFxD,2CAxFO,EA6FnBD,WAAa,SAACyB,GACZ,IAcEC,EAdmB,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGgBvB,KAAI,SAACC,GAAD,OACzBA,EAAED,KAAI,SAACE,GAAD,OAAO,EAAKlB,MAAMS,YAAYS,SAEtBsB,WACd,SAACvB,GAAD,OAAOA,EAAEwB,OAAM,SAACC,GAAD,MAAa,MAANA,MAAczB,EAAEwB,OAAM,SAACC,GAAD,MAAa,MAANA,QAGvD,GAAIH,GAAW,EAAf,CACE,MAAuC,EAAKvC,MAAtC2C,EAAN,EAAMA,SAAUC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,SAEtBN,GAAW,GACbM,EAAW,EACK,IAAZN,IAAe9C,EAAgB,uBACnB,IAAZ8C,IAAe9C,EAAgB,IACnB,IAAZ8C,IAAe9C,EAAgB,sBACnB,IAAZ8C,IAAe9C,EAAgB,qCACnB,IAAZ8C,IAAe9C,EAAgB,iBACnB,IAAZ8C,IAAe9C,EAAgB,wCAEnCoD,EAAW,EACK,IAAZN,IAAe7C,EAAiB,IACpB,IAAZ6C,IAAe7C,EAAiB,kBAGrB,IAAb4C,EAAgBK,IACfC,IAEL,IAAIvD,GACY,IAAbiD,EAAiB,WAAa,EAAKtC,MAAMG,WAAa,YAEzD,EAAKS,SAAS,CAAE+B,WAAUC,WAAU3C,UAAU,EAAMZ,SAAQwD,kBAI9D,GAAI,EAAK7C,MAAMS,YAAYgC,OAAM,SAACT,GAAD,MAAa,MAANA,GAAmB,MAANA,KAGnD,OAFAtB,QAAQC,IAAI,aACZ,EAAKC,SAAS,CAAEX,UAAU,EAAMZ,OAAQ,eAAgBwD,SAAU,KA3IpE,EAAK7C,MAAQ,CACXK,KAAM6B,KAAKY,MAAMZ,KAAKE,UAAY,EAClCjC,UAAW,EAAKP,MAAMM,SACtByC,SAAU,EACVC,SAAU,EACVnC,YAAa4B,MAAM,GAAGrE,OACtBiC,UAAU,EACVZ,OAAQ,GACRwD,SAAU,GAVK,E,qDAcnB,WAC0B,IAApBE,KAAK/C,MAAMK,MAAuC,QAAzB0C,KAAK/C,MAAMG,WAAqB4C,KAAKjC,Y,oBAmIpE,WAAU,IAAD,OACP,OACE,eAAC,IAAMkC,SAAP,WACE,sBAAK9D,GAAG,YAAR,UACE,mBAAGrB,UAAW,aAAmC,IAApBkF,KAAK/C,MAAMK,KAAa,UAAY,IAAjE,sBAGA,8BACG0C,KAAK/C,MAAM2C,SADd,IACyBI,KAAK/C,MAAM4C,YAEpC,mBAAG/E,UAAW,aAAmC,IAApBkF,KAAK/C,MAAMK,KAAa,UAAY,IAAjE,SACG0C,KAAK/C,MAAMG,eAGf4C,KAAK/C,MAAMC,UAAoC,IAAxB8C,KAAK/C,MAAM6C,UACjC,cAAC,EAAD,CAAYtE,UAAWkB,IAExBsD,KAAK/C,MAAMC,UAAoC,IAAxB8C,KAAK/C,MAAM6C,UACjC,cAAC,EAAD,CAAatE,UAAWmB,IAE1B,qBAAKR,GAAG,QAAQrB,UAAWkF,KAAK/C,MAAMC,SAAW,WAAa,GAA9D,SACG8C,KAAK/C,MAAMS,YAAYO,KAAI,SAACjC,EAAMC,GAAP,OAC1B,cAAC,EAAD,CAEED,KAAMA,EACNC,MAAOA,EACPC,YAAa,EAAKA,aAHbD,QAOV+D,KAAK/C,MAAMC,UACV,cAAC,EAAD,CACEX,UAAWyD,KAAKzD,UAChBC,SAAUwD,KAAKnD,MAAML,SACrBF,OAAQ0D,KAAK/C,MAAMX,gB,GArLZ4D,aCPbC,EAAO,SAACtD,GACZ,OACE,sBAAKV,GAAG,OAAR,UACE,mBAAGnB,MAAO,CAAEyB,SAAU,MAAtB,wBACA,wBAAQ2D,MAAM,KAAKpF,MAAO,CAAEyB,SAAU,QAAUL,QAASS,EAAMT,QAA/D,sBAGA,wBAAQgE,MAAM,SAASpF,MAAO,CAAEyB,SAAU,MAAQL,QAASS,EAAMT,QAAjE,wBAoCSiE,E,4MA5BbpD,MAAQ,CACNqD,OAAO,EACPnD,SAAU,I,EAGZoD,WAAa,SAACzD,GACZa,QAAQC,IAAId,EAAEU,OAAO4C,OACrB,IAAMjD,EAA8B,OAAnBL,EAAEU,OAAO4C,MAAiB,MAAQ,WACnDzC,QAAQC,IAAIT,GACZ,EAAKU,SAAS,CAAEyC,OAAO,EAAMnD,c,EAG/BX,SAAW,WACT,EAAKqB,SAAS,CAAEyC,OAAO,K,4CAGzB,WACE,OACE,eAAC,IAAML,SAAP,YACID,KAAK/C,MAAMqD,OAAS,cAAC,EAAD,CAAMlE,QAAS4D,KAAKO,aACzCP,KAAK/C,MAAMqD,OACV,cAAC,EAAD,CAAM9D,SAAUwD,KAAKxD,SAAUW,SAAU6C,KAAK/C,MAAME,kB,GAtB5C+C,aCZlBM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.220f6d2b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./strokeAnimations.css\";\r\n\r\nconst StrokeX = ({ strokeColor = \"green\" }) => {\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\r\n      <path\r\n        className=\"x-stroke-1\"\r\n        d=\"M89.296889,10.491441Q53.036996,54.874655,16.777103,80.827167\"\r\n        style={{\r\n          fill: \"none\",\r\n          stroke: strokeColor,\r\n          strokeWidth: \"4\",\r\n          strokeLinecap: \"round\",\r\n          strokeDashoffset: \"112\",\r\n          strokeDasharray: \"112\",\r\n        }}\r\n      />\r\n      <path\r\n        className=\"x-stroke-2\"\r\n        d=\"M16.777103,12.491441C55.889932,45.070127,69.234309,58.715259,86.535984,87.244617\"\r\n        style={{\r\n          fill: \"none\",\r\n          stroke: strokeColor,\r\n          strokeWidth: \"4\",\r\n          strokeLinecap: \"round\",\r\n          strokeDashoffset: \"112\",\r\n          strokeDasharray: \"112\",\r\n        }}\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst StrokeO = ({ strokeColor = \"red\" }) => {\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\r\n      <path\r\n        className=\"o-stroke\"\r\n        d=\"M31.727060,12.581920C61.757420,0.925840,84.609960,22.326770,86.091340,44.240370C87.572720,66.153960,85.739700,83.707870,59.366730,88.603690C32.993760,93.499510,9.797390,83.747830,11.519600,58.012140Q13.241820,32.276450,45.348100,14.367800Q11.978570,15.107440,31.727060,12.581920Z\"\r\n        transform=\"matrix(1 0 0 1 0 0.40744972500000)\"\r\n        style={{\r\n          fill: \"none\",\r\n          stroke: strokeColor,\r\n          strokeWidth: \"4\",\r\n          strokeLinecap: \"round\",\r\n          strokeDashoffset: \"251\",\r\n          strokeDasharray: \"251\",\r\n        }}\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst StrokeLine = ({ strokeColor = \"black\", transform = \"\" }) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 100 100\"\r\n      className=\"l-stroke\"\r\n      style={{ transform }}\r\n    >\r\n      <line\r\n        className=\"l-stroke\"\r\n        x1=\"-43.522097\"\r\n        y1=\"0\"\r\n        x2=\"23.147903\"\r\n        y2=\"0\"\r\n        transform=\"matrix(1 0 0 1 60.19209749999999 50)\"\r\n        style={{\r\n          fill: \"none\",\r\n          stroke: strokeColor,\r\n          strokeWidth: \"4\",\r\n          strokeLinecap: \"round\",\r\n          strokeDashoffset: \"68\",\r\n          strokeDasharray: \"68\",\r\n        }}\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst StrokeSlant = ({ strokeColor = \"black\", transform = \"\" }) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 100 100\"\r\n      className=\"s-stroke\"\r\n      style={{ transform }}\r\n    >\r\n      <line\r\n        className=\"s-stroke\"\r\n        x1=\"-33.335000\"\r\n        y1=\"-36.716518\"\r\n        x2=\"33.335000\"\r\n        y2=\"29.953482\"\r\n        transform=\"matrix(1 0 0 1 50.00500000000000 53.38651800000000)\"\r\n        style={{\r\n          fill: \"none\",\r\n          stroke: strokeColor,\r\n          strokeWidth: \"4\",\r\n          strokeLinecap: \"round\",\r\n          strokeDashoffset: \"96\",\r\n          strokeDasharray: \"96\",\r\n        }}\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport { StrokeX, StrokeO, StrokeLine, StrokeSlant };\r\n","import React from \"react\";\r\nimport { StrokeX, StrokeO } from \"./strokes\";\r\n\r\nconst Grid = ({ mark, index, handleClick }) => {\r\n  return (\r\n    <div\r\n      id={\"grid-\" + index}\r\n      index={index}\r\n      className=\"grid-item\"\r\n      onClick={handleClick}\r\n    >\r\n      {mark === \"x\" && <StrokeX />}\r\n      {mark === \"o\" && <StrokeO />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nconst PostGame = ({ winner, playAgain, quitGame }) => {\r\n  return (\r\n    <div id=\"post-game\">\r\n      <p style={{ gridArea: \"win\" }}>{winner}</p>\r\n      <button onClick={playAgain} style={{ gridArea: \"again\" }}>\r\n        Play Again\r\n      </button>\r\n      <button onClick={quitGame} style={{ gridArea: \"quit\" }}>\r\n        Quit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostGame;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./grid\";\r\nimport PostGame from \"./postgame\";\r\nimport \"./game.css\";\r\n\r\nimport { StrokeLine, StrokeSlant } from \"./strokes\";\r\n\r\nlet lineTransform = \"\",\r\n  slantTransform = \"\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      turn: Math.round(Math.random()) + 1,\r\n      playerTwo: this.props.opponent,\r\n      scoreOne: 0,\r\n      scoreTwo: 0,\r\n      displayGrid: Array(9).fill(),\r\n      boardWon: false,\r\n      winner: \"\",\r\n      lineType: 0, //1 -H/V, 2 - Slant\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.turn === 2 && this.state.playerTwo === \"Bot\") this.botMove();\r\n  }\r\n\r\n  handleClick = async (e) => {\r\n    const resume = !this.state.boardWon,\r\n      opponent = this.state.playerTwo,\r\n      currentTurn = this.state.turn;\r\n\r\n    if (resume && (opponent === \"Player 2\" || currentTurn === 1)) {\r\n      const index = parseInt(e.target.getAttribute(\"index\"));\r\n      let displayGrid = [...this.state.displayGrid];\r\n      console.log(index);\r\n      if (index >= 0 && !displayGrid[index]) {\r\n        displayGrid[index] = currentTurn === 1 ? \"x\" : \"o\";\r\n\r\n        await this.setState({ turn: currentTurn === 1 ? 2 : 1, displayGrid });\r\n        this.checkBoard(currentTurn);\r\n\r\n        if (opponent === \"Bot\" && !this.state.boardWon) this.botMove();\r\n      }\r\n    }\r\n  };\r\n\r\n  botMove = async () => {\r\n    const winningState = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    let state = winningState.map((c) =>\r\n      c.map((i) => this.state.displayGrid[i])\r\n    );\r\n    let displayGrid = [...this.state.displayGrid];\r\n\r\n    const almostWin = (arr) => {\r\n      let x = 0,\r\n        o = 0,\r\n        none = 0;\r\n      arr.forEach((a) => {\r\n        let b = this.state.displayGrid[a];\r\n        if (b === \"x\") x++;\r\n        else if (b === \"o\") o++;\r\n        else none++;\r\n      });\r\n      return none === 1 && (x === 2 || o === 2);\r\n    };\r\n\r\n    let index;\r\n\r\n    let almost = winningState.filter((w) => almostWin(w));\r\n    if (almost.length) {\r\n      let arr = almost.find((a) => a.some((b) => displayGrid[b] === \"o\"));\r\n      index = arr\r\n        ? arr.find((v) => !displayGrid[v])\r\n        : almost[0].find((v) => !displayGrid[v]);\r\n    } else {\r\n      const possibleMoves = displayGrid\r\n        .map((v, i) => (!v ? i : v))\r\n        .filter((v) => v !== \"x\" && v !== \"o\");\r\n      index = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n    }\r\n\r\n    displayGrid[index] = \"o\";\r\n\r\n    await this.setState({ turn: 1, displayGrid });\r\n    this.checkBoard(2);\r\n  };\r\n\r\n  playAgain = async () => {\r\n    await this.setState({ boardWon: false, displayGrid: Array(9).fill() });\r\n    if (this.state.turn === 2 && this.state.playerTwo === \"Bot\") this.botMove();\r\n  };\r\n\r\n  checkBoard = (prevturn) => {\r\n    const winningState = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    let state = winningState.map((c) =>\r\n        c.map((i) => this.state.displayGrid[i])\r\n      ),\r\n      winning = state.findIndex(\r\n        (c) => c.every((m) => m === \"x\") || c.every((m) => m === \"o\")\r\n      );\r\n\r\n    if (winning >= 0) {\r\n      let { scoreOne, scoreTwo, lineType } = this.state;\r\n\r\n      if (winning <= 5) {\r\n        lineType = 1;\r\n        if (winning === 0) lineTransform = \"translateY(-33.33%)\";\r\n        if (winning === 1) lineTransform = \"\";\r\n        if (winning === 2) lineTransform = \"translateY(33.33%)\";\r\n        if (winning === 3) lineTransform = \"rotate(90deg) translateY(33.333%)\";\r\n        if (winning === 4) lineTransform = \"rotate(90deg)\";\r\n        if (winning === 5) lineTransform = \"rotate(90deg) translateY(-33.333%)\";\r\n      } else {\r\n        lineType = 2;\r\n        if (winning === 6) slantTransform = \"\";\r\n        if (winning === 7) slantTransform = \"rotate(90deg)\";\r\n      }\r\n\r\n      if (prevturn === 1) scoreOne++;\r\n      else scoreTwo++;\r\n\r\n      let winner =\r\n        (prevturn === 1 ? \"Player 1\" : this.state.playerTwo) + \" has Won!\";\r\n\r\n      this.setState({ scoreOne, scoreTwo, boardWon: true, winner, lineType });\r\n      return;\r\n    }\r\n\r\n    if (this.state.displayGrid.every((v) => v === \"x\" || v === \"o\")) {\r\n      console.log(\"draw\");\r\n      this.setState({ boardWon: true, winner: \"It's a Draw!\", lineType: 0 });\r\n      return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"game-info\">\r\n          <p className={\"info-item\" + (this.state.turn === 1 ? \" active\" : \"\")}>\r\n            Player 1\r\n          </p>\r\n          <p>\r\n            {this.state.scoreOne}:{this.state.scoreTwo}\r\n          </p>\r\n          <p className={\"info-item\" + (this.state.turn === 2 ? \" active\" : \"\")}>\r\n            {this.state.playerTwo}\r\n          </p>\r\n        </div>\r\n        {this.state.boardWon && this.state.lineType === 1 && (\r\n          <StrokeLine transform={lineTransform} />\r\n        )}\r\n        {this.state.boardWon && this.state.lineType === 2 && (\r\n          <StrokeSlant transform={slantTransform} />\r\n        )}\r\n        <div id=\"board\" className={this.state.boardWon ? \"disabled\" : \"\"}>\r\n          {this.state.displayGrid.map((mark, index) => (\r\n            <Grid\r\n              key={index}\r\n              mark={mark}\r\n              index={index}\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </div>\r\n        {this.state.boardWon && (\r\n          <PostGame\r\n            playAgain={this.playAgain}\r\n            quitGame={this.props.quitGame}\r\n            winner={this.state.winner}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./components/game\";\r\n\r\nconst Mode = (props) => {\r\n  return (\r\n    <div id=\"mode\">\r\n      <p style={{ gridArea: \"p1\" }}>Player vs.</p>\r\n      <button value=\"ai\" style={{ gridArea: \"comp\" }} onClick={props.onClick}>\r\n        Computer\r\n      </button>\r\n      <button value=\"player\" style={{ gridArea: \"p2\" }} onClick={props.onClick}>\r\n        Player\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    start: false,\r\n    opponent: \"\",\r\n  };\r\n\r\n  modeSelect = (e) => {\r\n    console.log(e.target.value);\r\n    const opponent = e.target.value === \"ai\" ? \"Bot\" : \"Player 2\";\r\n    console.log(opponent);\r\n    this.setState({ start: true, opponent });\r\n  };\r\n\r\n  quitGame = () => {\r\n    this.setState({ start: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {!this.state.start && <Mode onClick={this.modeSelect} />}\r\n        {this.state.start && (\r\n          <Game quitGame={this.quitGame} opponent={this.state.opponent} />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}